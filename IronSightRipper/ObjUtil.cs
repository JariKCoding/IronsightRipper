using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;

namespace IronsightRipper
{
    class ObjUtil
    {
        public static void ExportObjFile(string FileName, List<ModelMesh> ModelMeshes, List<Material> MaterialList)
        {
            // Create a file
            using (var outputStream = new StreamWriter(FileName + ".obj", false))
            {
                // Add some credit lines
                outputStream.WriteLine("# Generated by Ironsight extraction tool");
                outputStream.WriteLine("# Please credit JerriGaming, Scobalula & DTZxPorter for using it!" + System.Environment.NewLine);

                // Print all the vertex coordinates
                foreach(ModelMesh Mesh in ModelMeshes)
                {
                    for (int i = 0; i < Mesh.VertexCoordinates.GetLength(0); i++)
                    {
                        outputStream.Write(System.Environment.NewLine + "v " + Math.Round(Mesh.VertexCoordinates[i, 0], 6).ToString()
                            + " " + Math.Round(Mesh.VertexCoordinates[i, 1], 6).ToString() + " " + Math.Round(Mesh.VertexCoordinates[i, 2], 6).ToString());
                    }
                }

                // Print all the UV values
                foreach (ModelMesh Mesh in ModelMeshes)
                {
                    for (int i = 0; i < Mesh.UVValues.GetLength(0); i++)
                    {
                        outputStream.Write(System.Environment.NewLine + "vt " + Math.Round(Mesh.UVValues[i, 0], 6).ToString() + " " + Math.Round(Mesh.UVValues[i, 1], 6).ToString());
                    }
                }

                // Get the model name
                string ModelName = Path.GetFileNameWithoutExtension(FileName).Replace("-", "_").Replace("#", "");

                // Calculate the faces idk how i did this but it works
                float oldhighnumber = 0;
                float highnumber = 0;
                for (int i = 0; i < ModelMeshes.Count(); i++)
                {
                    if (ModelMeshes.Count() == 1)
                    {
                        NewMesh(outputStream, ModelName);
                    }
                    else
                    {
                        NewMesh(outputStream, ModelName + "_" + i);
                    }
                    for (int j = 0; j < ModelMeshes[i].FacesValues.GetLength(0); j++)
                    {
                        outputStream.Write(System.Environment.NewLine + "f ");
                        outputStream.Write((ModelMeshes[i].FacesValues[j, 0] + oldhighnumber) + "/" + (ModelMeshes[i].FacesValues[j, 0] + oldhighnumber) + "/");
                        outputStream.Write(" " + (ModelMeshes[i].FacesValues[j, 1] + oldhighnumber) + "/" + (ModelMeshes[i].FacesValues[j, 1] + oldhighnumber) + "/");
                        outputStream.Write(" " + (ModelMeshes[i].FacesValues[j, 2] + oldhighnumber) + "/" + (ModelMeshes[i].FacesValues[j, 2] + oldhighnumber) + "/");
                        float number = (ModelMeshes[i].FacesValues[j, 0] + oldhighnumber);
                        if ((ModelMeshes[i].FacesValues[j, 1] + oldhighnumber) > number)
                        {
                            number = (ModelMeshes[i].FacesValues[j, 1] + oldhighnumber);
                        }
                        if ((ModelMeshes[i].FacesValues[j, 2] + oldhighnumber) > number)
                        {
                            number = (ModelMeshes[i].FacesValues[j, 2] + oldhighnumber);
                        }
                        if (number > highnumber)
                        {
                            highnumber = number;
                        }
                    }
                    oldhighnumber = highnumber;
                }

                // Create the material files
                foreach (Material mtrl in MaterialList)
                {
                    CreateMtlFile(Path.GetDirectoryName(FileName) + "\\", mtrl.Name, mtrl.ColorMap, mtrl.NormalMap);
                }
            }
        }

        public static void NewMesh(StreamWriter outputStream, string materialName)
        {
            // Print the info for the mesh
            outputStream.Write(System.Environment.NewLine + "mtllib mtl_" + materialName + ".mtl");
            outputStream.Write(System.Environment.NewLine + "g mtl_" + materialName);
            outputStream.Write(System.Environment.NewLine + "usemtl mtl_" + materialName);
        }

        public static void CreateMtlFile(string outputfolder, string materialname, string colormapname, string normalmapName)
        {
            // Create a file for the material
            using (var outputStream = new StreamWriter(outputfolder + "\\" + materialname + ".mtl", false))
            {
                // Print the info for the material
                outputStream.Write("newmtl " + materialname + System.Environment.NewLine);
                outputStream.Write("illum 4" + System.Environment.NewLine + "Kd 1.00 1.00 1.00" + System.Environment.NewLine + "Ka 1.00 1.00 1.00" + System.Environment.NewLine + "Ks 0.00 0.00 0.00" + System.Environment.NewLine);
                outputStream.Write("map_Kd " + colormapname + System.Environment.NewLine);
                outputStream.Write("map_bump " + normalmapName + System.Environment.NewLine);
            }
        }
    }
}
