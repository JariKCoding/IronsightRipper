using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;

namespace IronSightRipper
{
    class ObjUtil
    {
        public static void ExportObjFile(string FileName, List<float[,]> VertexList, List<float[,]> UVList, List<float[,]> FacesList)
        {
            using (var outputStream = new StreamWriter(FileName + ".obj", false))
            {
                outputStream.WriteLine("# Generated by Ironsight extraction tool");
                outputStream.WriteLine("# Please credit JerriGaming, Scobalula & DTZxPorter for using it!" + System.Environment.NewLine);
                for (int i = 0; i < VertexList.Count; i++)
                {
                    for (int j = 0; j < VertexList[i].GetLength(0); j++)
                    {
                        outputStream.Write(System.Environment.NewLine + "v " + Math.Round(VertexList[i][j,0], 6).ToString() + " " + Math.Round(VertexList[i][j, 1], 6).ToString() + " " + Math.Round(VertexList[i][j, 2], 6).ToString() );
                    }
                }

                for (int i = 0; i < UVList.Count; i++)
                {
                    for (int j = 0; j < UVList[i].GetLength(0); j++)
                    {
                        outputStream.Write(System.Environment.NewLine + "vt " + Math.Round(UVList[i][j, 0], 6).ToString() + " " + Math.Round(UVList[i][j, 1], 6).ToString() );
                    }
                }

                string modelname = Path.GetFileNameWithoutExtension(FileName).Replace("-", "_").Replace("#", "");

                float oldhighnumber = 0;
                float highnumber = 0;
                for (int i = 0; i < FacesList.Count; i++)
                {
                    if(FacesList.Count == 1)
                    {
                        NewMesh(outputStream, modelname);
                    }
                    else
                    {
                        NewMesh(outputStream, modelname + "_" + i);
                    }
                    for (int j = 0; j < FacesList[i].GetLength(0); j++)
                    {
                        outputStream.Write(System.Environment.NewLine + "f ");
                        outputStream.Write((FacesList[i][j,0] + oldhighnumber) + "/" + (FacesList[i][j, 0] + oldhighnumber) + "/");
                        outputStream.Write(" " + (FacesList[i][j, 1] + oldhighnumber) + "/" + (FacesList[i][j, 1] + oldhighnumber) + "/" );
                        outputStream.Write(" " + (FacesList[i][j, 2] + oldhighnumber) + "/" + (FacesList[i][j, 2] + oldhighnumber) + "/" );
                        float number = (FacesList[i][j, 0] + oldhighnumber);
                        if((FacesList[i][j, 1] + oldhighnumber) > number)
                        {
                            number = (FacesList[i][j, 1] + oldhighnumber);
                        }
                        if ((FacesList[i][j, 2] + oldhighnumber) > number)
                        {
                            number = (FacesList[i][j, 2] + oldhighnumber);
                        }
                        if (number > highnumber)
                        {
                            highnumber = number;
                        }
                    }
                    oldhighnumber = highnumber;
                }
            }
        }

        public static void NewMesh(StreamWriter outputStream, string materialname)
        {
            outputStream.Write(System.Environment.NewLine + "mtllib mtl_" + materialname + ".mtl");
            outputStream.Write(System.Environment.NewLine + "g mtl_" + materialname);
            outputStream.Write(System.Environment.NewLine + "usemtl mtl_" + materialname);
        }

        public static void CreateMtlFile(string outputfolder, string materialname, string colormapname)
        {
            using (var outputStream = new StreamWriter(outputfolder + "\\" + materialname + ".mtl", false))
            {
                outputStream.Write("newmtl " + materialname + System.Environment.NewLine);
                outputStream.Write("illum 4" + System.Environment.NewLine + "Kd 0.00 0.00 0.00" + System.Environment.NewLine + "Ka 0.00 0.00 0.00" + System.Environment.NewLine + "Ks 0.50 0.50 0.50" + System.Environment.NewLine);
                outputStream.Write("map_Kd " + colormapname + System.Environment.NewLine);
            }
        }
    }
}
