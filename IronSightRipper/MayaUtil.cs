using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;
using System.Windows.Media.Media3D;

namespace IronSightRipper
{
    class MayaUtil
    {
        public static void ExportMaFile(string FileName, List<float[,]> VertexList, List<float[,]> UVList, List<float[,]> FacesList, float[,] boneCoors, int[] boneparents, List<Vector3D> BoneAngles, List<string[]> MaterialList, List<float[,]> WeightList)
        {
            StreamWriter output = NewMayaFile(FileName);
            
            string modelname = Path.GetFileNameWithoutExtension(FileName).Replace("-", "_").Replace("#", "");
            NewGroup(output, modelname);

            for (int i = 0; i < VertexList.Count; i++)
            {
                if(VertexList.Count == 1)
                {
                    NewMesh(output, "Mesh_" + modelname, modelname, i);
                }
                else
                {
                    NewMesh(output, "Mesh_" + modelname + "_" + i, modelname, i);
                }
                AddUvValues(output, UVList, i);

               
                AddColorSet(output, FacesList, i);
                AddVertexValues(output, VertexList, i);
                AddFacesValues(output, FacesList, i);
            }

            output.WriteLine();
            for (int i = 0; i < MaterialList.Count; i++)
            {
                AddMaterialBegin(output, MaterialList, i);
            }
            
            for (int i = 0; i < MaterialList.Count; i++)
            {
                AddMaterial(output, MaterialList, i);
            }
            output.WriteLine();
            for (int i = 0; i < MaterialList.Count; i++)
            {
                AddMaterialAssign(output, MaterialList, i);
            }

            NewGroup(output, "Joints");
            for (int i = 0; i < boneCoors.GetLength(0); i++)
            {
                float Xcoor = 0;
                float Ycoor = 0;
                float Zcoor = 0;
                double XDir = 0;
                double YDir = 0;
                double ZDir = 0;
                string jointname = "tag_" + modelname + "_" + i;
                string parentname = "";
                if (boneparents[i] == -1)
                {
                    Xcoor = boneCoors[i, 0];
                    Ycoor = boneCoors[i, 1];
                    Zcoor = boneCoors[i, 2];
                    XDir = BoneAngles[i].X;
                    YDir = BoneAngles[i].Y;
                    ZDir = BoneAngles[i].Z;
                    parentname = "Joints";
                }
                else
                {
                    Xcoor = boneCoors[i, 0] - boneCoors[boneparents[i], 0];
                    Ycoor = boneCoors[i, 1] - boneCoors[boneparents[i], 1];
                    Zcoor = boneCoors[i, 2] - boneCoors[boneparents[i], 2];
                    XDir = BoneAngles[i].X - BoneAngles[boneparents[i]].X;
                    YDir = BoneAngles[i].Y - BoneAngles[boneparents[i]].Y;
                    ZDir = BoneAngles[i].Z - BoneAngles[boneparents[i]].Z;
                    parentname = "tag_" + modelname + "_" + (boneparents[i]);
                }
                NewJoint(output, Xcoor, Ycoor, Zcoor, jointname, parentname, XDir, YDir, ZDir);
            }
            NewMayaBindFile(FileName, modelname, WeightList, boneparents);
            output.Close();
        }

        public static StreamWriter NewMayaFile(string FileName)
        {
            var outputStream = new StreamWriter(FileName + ".ma", false);
            outputStream.Write("// Generated by Ironsight extraction tool" + System.Environment.NewLine);
            outputStream.Write("// Please credit JerriGaming, Scobalula & DTZxPorter for using it!" + System.Environment.NewLine + System.Environment.NewLine);
            string mayaheader = "requires maya \"8.5\";" + System.Environment.NewLine + "currentUnit -l centimeter -a degree -t film;" + System.Environment.NewLine + "fileInfo \"application\" \"maya\";" + System.Environment.NewLine + "fileInfo \"product\" \"Maya Unlimited 8.5\";" + System.Environment.NewLine + "fileInfo \"version\" \"8.5\";" + System.Environment.NewLine + "fileInfo \"cutIdentifier\" \"200612162224-692032\";" + System.Environment.NewLine + "createNode transform -s -n \"persp\";" + System.Environment.NewLine + "\tsetAttr \".v\" no;" + System.Environment.NewLine + "\tsetAttr \".t\" -type \"double3\" 48.186233840145825 37.816674066853686 41.0540421364379 ;" + System.Environment.NewLine + "\tsetAttr \".r\" -type \"double3\" -29.738352729603015 49.400000000000432 0 ;" + System.Environment.NewLine + "createNode camera -s -n \"perspShape\" -p \"persp\";" + System.Environment.NewLine + "\tsetAttr -k off \".v\" no;" + System.Environment.NewLine + "\tsetAttr \".fl\" 34.999999999999993;" + System.Environment.NewLine + "\tsetAttr \".fcp\" 10000;" + System.Environment.NewLine + "\tsetAttr \".coi\" 73.724849603665149;" + System.Environment.NewLine + "\tsetAttr \".imn\" -type \"string\" \"persp\";" + System.Environment.NewLine + "\tsetAttr \".den\" -type \"string\" \"persp_depth\";" + System.Environment.NewLine + "\tsetAttr \".man\" -type \"string\" \"persp_mask\";" + System.Environment.NewLine + "\tsetAttr \".hc\" -type \"string\" \"viewSet -p %camera\";" + System.Environment.NewLine + "createNode transform -s -n \"top\";";
            mayaheader += System.Environment.NewLine + "\tsetAttr \".v\" no;" + System.Environment.NewLine + "\tsetAttr \".t\" -type \"double3\" 0 100.1 0 ;" + System.Environment.NewLine + "\tsetAttr \".r\" -type \"double3\" -89.999999999999986 0 0 ;" + System.Environment.NewLine + "createNode camera -s -n \"topShape\" -p \"top\";" + System.Environment.NewLine + "\tsetAttr -k off \".v\" no;" + System.Environment.NewLine + "\tsetAttr \".rnd\" no;" + System.Environment.NewLine + "\tsetAttr \".coi\" 100.1;" + System.Environment.NewLine + "\tsetAttr \".ow\" 30;" + System.Environment.NewLine + "\tsetAttr \".imn\" -type \"string\" \"top\";" + System.Environment.NewLine + "\tsetAttr \".den\" -type \"string\" \"top_depth\";" + System.Environment.NewLine + "\tsetAttr \".man\" -type \"string\" \"top_mask\";" + System.Environment.NewLine + "\tsetAttr \".hc\" -type \"string\" \"viewSet -t %camera\";" + System.Environment.NewLine + "\tsetAttr \".o\" yes;" + System.Environment.NewLine + "createNode transform -s -n \"front\";" + System.Environment.NewLine + "\tsetAttr \".v\" no;" + System.Environment.NewLine + "\tsetAttr \".t\" -type \"double3\" 0 0 100.1 ;" + System.Environment.NewLine + "createNode camera -s -n \"frontShape\" -p \"front\";" + System.Environment.NewLine + "\tsetAttr -k off \".v\" no;" + System.Environment.NewLine + "\tsetAttr \".rnd\" no;" + System.Environment.NewLine + "\tsetAttr \".coi\" 100.1;" + System.Environment.NewLine + "\tsetAttr \".ow\" 30;" + System.Environment.NewLine + "\tsetAttr \".imn\" -type \"string\" \"front\";";
            mayaheader += System.Environment.NewLine + "\tsetAttr \".den\" -type \"string\" \"front_depth\";" + System.Environment.NewLine + "\tsetAttr \".man\" -type \"string\" \"front_mask\";" + System.Environment.NewLine + "\tsetAttr \".hc\" -type \"string\" \"viewSet -f %camera\";" + System.Environment.NewLine + "\tsetAttr \".o\" yes;" + System.Environment.NewLine + "createNode transform -s -n \"side\";" + System.Environment.NewLine + "\tsetAttr \".v\" no;" + System.Environment.NewLine + "\tsetAttr \".t\" -type \"double3\" 100.1 0 0 ;" + System.Environment.NewLine + "\tsetAttr \".r\" -type \"double3\" 0 89.999999999999986 0 ;" + System.Environment.NewLine + "createNode camera -s -n \"sideShape\" -p \"side\";" + System.Environment.NewLine + "\tsetAttr -k off \".v\" no;" + System.Environment.NewLine + "\tsetAttr \".rnd\" no;" + System.Environment.NewLine + "\tsetAttr \".coi\" 100.1;" + System.Environment.NewLine + "\tsetAttr \".ow\" 30;" + System.Environment.NewLine + "\tsetAttr \".imn\" -type \"string\" \"side\";" + System.Environment.NewLine + "\tsetAttr \".den\" -type \"string\" \"side_depth\";" + System.Environment.NewLine + "\tsetAttr \".man\" -type \"string\" \"side_mask\";" + System.Environment.NewLine + "\tsetAttr \".hc\" -type \"string\" \"viewSet -s %camera\";" + System.Environment.NewLine + "\tsetAttr \".o\" yes;" + System.Environment.NewLine + "createNode lightLinker -n \"lightLinker1\";" + System.Environment.NewLine + "\tsetAttr -s 9 \".lnk\";" + System.Environment.NewLine + "\tsetAttr -s 9 \".slnk\";";
            mayaheader += System.Environment.NewLine + "createNode displayLayerManager -n \"layerManager\";" + System.Environment.NewLine + "createNode displayLayer -n \"defaultLayer\";" + System.Environment.NewLine + "createNode renderLayerManager -n \"renderLayerManager\";" + System.Environment.NewLine + "createNode renderLayer -n \"defaultRenderLayer\";" + System.Environment.NewLine + "\tsetAttr \".g\" yes;" + System.Environment.NewLine + "createNode script -n \"sceneConfigurationScriptNode\";" + System.Environment.NewLine + "\tsetAttr \".b\" -type \"string\" \"playbackOptions -min 1 -max 24 -ast 1 -aet 48 \";" + System.Environment.NewLine + "\tsetAttr \".st\" 6;" + System.Environment.NewLine + "select -ne :time1;" + System.Environment.NewLine + "\tsetAttr \".o\" 1;" + System.Environment.NewLine + "select -ne :renderPartition;" + System.Environment.NewLine + "\tsetAttr -s 2 \".st\";" + System.Environment.NewLine + "select -ne :renderGlobalsList1;" + System.Environment.NewLine + "select -ne :defaultShaderList1;" + System.Environment.NewLine + "\tsetAttr -s 2 \".s\";" + System.Environment.NewLine + "select -ne :postProcessList1;" + System.Environment.NewLine + "\tsetAttr -s 2 \".p\";" + System.Environment.NewLine + "select -ne :lightList1;" + System.Environment.NewLine + "select -ne :initialShadingGroup;" + System.Environment.NewLine + "\tsetAttr \".ro\" yes;" + System.Environment.NewLine + "select -ne :initialParticleSE;" + System.Environment.NewLine + "\tsetAttr \".ro\" yes;";
            mayaheader += System.Environment.NewLine + "select -ne :hardwareRenderGlobals;" + System.Environment.NewLine + "\tsetAttr \".ctrs\" 256;" + System.Environment.NewLine + "\tsetAttr \".btrs\" 512;" + System.Environment.NewLine + "select -ne :defaultHardwareRenderGlobals;" + System.Environment.NewLine + "\tsetAttr \".fn\" -type \"string\" \"im\";" + System.Environment.NewLine + "\tsetAttr \".res\" -type \"string\" \"ntsc_4d 646 485 1.333\";" + System.Environment.NewLine + "select -ne :ikSystem;" + System.Environment.NewLine + "\tsetAttr -s 4 \".sol\";" + System.Environment.NewLine + "connectAttr \":defaultLightSet.msg\" \"lightLinker1.lnk[0].llnk\";" + System.Environment.NewLine + "connectAttr \":initialShadingGroup.msg\" \"lightLinker1.lnk[0].olnk\";" + System.Environment.NewLine + "connectAttr \":defaultLightSet.msg\" \"lightLinker1.lnk[1].llnk\";" + System.Environment.NewLine + "connectAttr \":initialParticleSE.msg\" \"lightLinker1.lnk[1].olnk\";" + System.Environment.NewLine + "connectAttr \":defaultLightSet.msg\" \"lightLinker1.slnk[0].sllk\";" + System.Environment.NewLine + "connectAttr \":initialShadingGroup.msg\" \"lightLinker1.slnk[0].solk\";" + System.Environment.NewLine + "connectAttr \":defaultLightSet.msg\" \"lightLinker1.slnk[1].sllk\";" + System.Environment.NewLine + "connectAttr \":initialParticleSE.msg\" \"lightLinker1.slnk[1].solk\";" + System.Environment.NewLine + "connectAttr \"layerManager.dli[0]\" \"defaultLayer.id\";" + System.Environment.NewLine + "connectAttr \"renderLayerManager.rlmi[0]\" \"defaultRenderLayer.rlid\";" + System.Environment.NewLine + "connectAttr \"lightLinker1.msg\" \":lightList1.ln\" -na;";
            outputStream.Write(mayaheader);

            return outputStream;
        }

        public static void NewMayaBindFile(string FileName, string modelname, List<float[,]> WeightList, int[] boneparents)
        {
            var outputStream = new StreamWriter(FileName + "_BIND.mel", false);
            outputStream.Write( "/*" + System.Environment.NewLine + "* Generated by Ironsight extraction tool" + System.Environment.NewLine);
            outputStream.Write("* Please credit JerriGaming & Scobalula for using it!" + System.Environment.NewLine + "*/" + System.Environment.NewLine);

            for (int i = 0; i < WeightList.Count; i++)
            {
                string meshname = "";
                if (WeightList.Count == 1)
                {
                    meshname = "Mesh_" + modelname;
                }
                else
                {
                    meshname = "Mesh_" + modelname + "_" + i;
                }
                outputStream.Write(System.Environment.NewLine + "global proc "+ meshname + "_BindFunc()");
                outputStream.Write(System.Environment.NewLine + "{");

                outputStream.Write(System.Environment.NewLine + "\tselect -r " + meshname + ";");
                for (int j = 0; j < boneparents.Length; j++)
                {
                    string jointname = "tag_" + modelname + "_" + j;
                    outputStream.Write(System.Environment.NewLine + "\tselect -add " + jointname + ";");
                }
                outputStream.Write(System.Environment.NewLine + "\tnewSkinCluster \"-toSelectedBones -mi 30 -omi true -dr 5.0 -rui false\";" + System.Environment.NewLine);
                outputStream.Write(System.Environment.NewLine + "\tstring $clu = findRelatedSkinCluster(\"" + meshname + "\");" + System.Environment.NewLine);

                for (int j = 0; j < boneparents.Length; j++)
                {
                    string jointname = "tag_" + modelname + "_" + j;
                    
                    int[] LowerVertex = {-1, -1, -1, -1 };
                    for (int h = 0; h < WeightList[i].GetLength(0); h++)
                    {
                        
                        for (int g = 0; g < 4; g++)
                        {
                            if (WeightList[i][h, g] == j)
                            {

                                if (h + 1 == WeightList[i].GetLength(0))
                                {
                                    if(LowerVertex[g] == -1 && WeightList[i][h, 4 + g] != 0)
                                    {
                                        outputStream.Write(System.Environment.NewLine + "\tskinPercent -tv tag_" + modelname + "_" + WeightList[i][h, g] + " " + WeightList[i][h, 4 + g] + " $clu " + meshname + ".vtx[" + h + "];");
                                    }
                                    else if (WeightList[i][h, 4 + g] != 0)
                                    {
                                        outputStream.Write(System.Environment.NewLine + "\tskinPercent -tv tag_" + modelname + "_" + WeightList[i][h, g] + " " + WeightList[i][h, 4 + g] + " $clu " + meshname + ".vtx[" + LowerVertex[g] + ":" + h + "];");
                                    }
                                }
                                else
                                {
                                    if (LowerVertex[g] == -1)
                                    {
                                        if(WeightList[i][h + 1, g] == WeightList[i][h, 0 + g] && WeightList[i][h + 1, 4 + g] == WeightList[i][h, 4 + g] && WeightList[i][h, 4 + g] != 0)
                                        {
                                            LowerVertex[g] = h;
                                        }
                                        else if (WeightList[i][h, 4 + g] != 0)
                                        {
                                            outputStream.Write(System.Environment.NewLine + "\tskinPercent -tv tag_" + modelname + "_" + WeightList[i][h, g] + " " + WeightList[i][h, 4 + g] + " $clu " + meshname + ".vtx[" + h + "];");
                                        }
                                    }
                                    else
                                    {
                                        if (WeightList[i][h + 1, g] == WeightList[i][h, g] && WeightList[i][h + 1, 4 + g] == WeightList[i][h, 4 + g])
                                        {

                                        }
                                        else if(WeightList[i][h, 4 + g] != 0)
                                        {
                                            outputStream.Write(System.Environment.NewLine + "\tskinPercent -tv tag_" + modelname + "_" + WeightList[i][h, g] + " " + WeightList[i][h, 4 + g] + " $clu " + meshname + ".vtx[" + LowerVertex[g] + ":" + h + "];");
                                            LowerVertex[g] = -1;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                outputStream.Write(System.Environment.NewLine + "}");
            }
            outputStream.Write(System.Environment.NewLine);
            outputStream.Write(System.Environment.NewLine + "global proc RunAdvancedScript()");
            outputStream.Write(System.Environment.NewLine + "{");
            for (int i = 0; i < WeightList.Count; i++)
            {
                string meshname = "";
                if (WeightList.Count == 1)
                {
                    meshname = "Mesh_" + modelname;
                }
                else
                {
                    meshname = "Mesh_" + modelname + "_" + i;
                }
                outputStream.Write(System.Environment.NewLine + "\tcatch("+ meshname + "_BindFunc());");
            }
            outputStream.Write(System.Environment.NewLine + "}" + System.Environment.NewLine);
            outputStream.Write(System.Environment.NewLine + "global proc NamespacePurge()");
            outputStream.Write(System.Environment.NewLine + "{");
            outputStream.Write(System.Environment.NewLine + "\tstring $allNodes[] = `ls`;");
            outputStream.Write(System.Environment.NewLine + "\tfor($node in $allNodes) {");
            outputStream.Write(System.Environment.NewLine + "\t\tstring $buffer[];");
            outputStream.Write(System.Environment.NewLine + "\t\ttokenize $node \":\" $buffer;");
            outputStream.Write(System.Environment.NewLine + "\t\tstring $newName = $buffer[size($buffer)-1];");
            outputStream.Write(System.Environment.NewLine + "\t\t catchQuiet(`rename $node $newName`);");
            outputStream.Write(System.Environment.NewLine + "\t}");
            outputStream.Write(System.Environment.NewLine + "}" + System.Environment.NewLine);
            outputStream.Write(System.Environment.NewLine + "print(\"Currently binding the current model, please wait...\");");
            outputStream.Write(System.Environment.NewLine + "NamespacePurge();");
            outputStream.Write(System.Environment.NewLine + "RunAdvancedScript();");
            outputStream.Write(System.Environment.NewLine + "print(\"The model has been binded.\");");

            outputStream.Close();
        }

        public static void NewGroup(StreamWriter outputstream, string groupname)
        {
            outputstream.Write(System.Environment.NewLine + "createNode transform -n \""+ groupname + "\";");
            outputstream.Write(System.Environment.NewLine + "setAttr \".ove\" yes;");
        }

        public static void NewMesh(StreamWriter outputstream, string meshname, string groupname, int meshindex)
        {
            outputstream.Write(System.Environment.NewLine + "createNode transform -n \""+ meshname + "\" -p \""+ groupname + "\";");
            outputstream.Write(System.Environment.NewLine + "setAttr \".rp\" -type \"double3\" 0.000000 0.000000 0.000000 ;");
            outputstream.Write(System.Environment.NewLine + "setAttr \".sp\" -type \"double3\" 0.000000 0.000000 0.000000 ;");
            outputstream.Write(System.Environment.NewLine + "createNode mesh -n \"MeshShape_"+ meshindex + "\" -p \"" + meshname + "\";");
            outputstream.Write(System.Environment.NewLine + "setAttr -k off \".v\";");
            outputstream.Write(System.Environment.NewLine + "setAttr \".vir\" yes;");
            outputstream.Write(System.Environment.NewLine + "setAttr \".vif\" yes;");
        }

        public static void NewJoint(StreamWriter output, float Xcoor, float Ycoor, float Zcoor, string jointname, string parentname, double XDir, double YDir, double ZDir)
        {
            output.Write(System.Environment.NewLine + System.Environment.NewLine + "createNode joint -n \"" + jointname + "\" -p \"" + parentname + "\";");
            output.Write(System.Environment.NewLine + "addAttr -ci true -sn \"liw\" -ln \"lockInfluenceWeights\" -bt \"lock\" -min 0 -max 1 -at \"bool\";");
            output.Write(System.Environment.NewLine + "setAttr \".uoc\" yes;");
            output.Write(System.Environment.NewLine + "setAttr \".ove\" yes;");
            output.Write(System.Environment.NewLine + "setAttr \".t\" -type \"double3\"  " + Xcoor + " " + Ycoor + " " + Zcoor + " ;");
            output.Write(System.Environment.NewLine + "setAttr \".mnrl\" -type \"double3\" -360 -360 -360 ;");
            output.Write(System.Environment.NewLine + "setAttr \".mxrl\" -type \"double3\" 360 360 360 ;");
            output.Write(System.Environment.NewLine + "setAttr \".radi\"   0.50;");
            //output.Write(System.Environment.NewLine + "setAttr \".jo\" -type \"double3\" "+ XDir + " " + YDir + " " + ZDir + ";");
            output.Write(System.Environment.NewLine + "setAttr \".jo\" -type \"double3\" 0 0 0;");
            output.Write(System.Environment.NewLine + "setAttr \".scale\" -type \"double3\" 1.000000 1.000000 1.000000;");
        }

        public static void AddUvValues(StreamWriter output, List<float[,]> UVList, int meshnumber)
        {
            output.Write(System.Environment.NewLine + "setAttr \".iog[0].og[0].gcl\" -type \"componentList\" 1 \"f[0:"+ UVList[meshnumber].GetLength(0) + "]\";");
            output.Write(System.Environment.NewLine + "setAttr \".uvst[0].uvsn\" -type \"string\" \"map1\";");
            output.Write(System.Environment.NewLine + "setAttr -s " + UVList[meshnumber].GetLength(0) + " \".uvst[0].uvsp\";");
            output.Write(System.Environment.NewLine + "setAttr \".uvst[0].uvsp[0:" + (UVList[meshnumber].GetLength(0) - 1) + "]\" -type \"float2\"");
            for (int i = 0; i < UVList[meshnumber].GetLength(0); i++)
            {
                output.Write(" " + UVList[meshnumber][i, 0] + " " + UVList[meshnumber][i, 1]);
            }
            output.Write(";" + System.Environment.NewLine + "setAttr \".cuvs\" -type \"string\" \"map1\";");
            output.Write(System.Environment.NewLine + "setAttr \".dcol\" yes;");
        }

        public static void AddVertexValues(StreamWriter output, List<float[,]> VertexList, int meshnumber)
        {
            output.Write(System.Environment.NewLine + "setAttr \".covm[0]\"  0 1 1;");
            output.Write(System.Environment.NewLine + "setAttr \".cdvm[0]\"  0 1 1;");
            output.Write(System.Environment.NewLine + "setAttr -s " + VertexList[meshnumber].GetLength(0) + " \".vt\";");
            output.Write(System.Environment.NewLine + "setAttr \".vt[0:" + (VertexList[meshnumber].GetLength(0) - 1) + "]\" ");
            for (int i = 0; i < VertexList[meshnumber].GetLength(0); i++)
            {
                output.Write(" " + VertexList[meshnumber][i, 0] + " " + VertexList[meshnumber][i, 1] + " " + VertexList[meshnumber][i, 2]);
            }
            output.Write(";");
        }

        public static void AddFacesValues(StreamWriter output, List<float[,]> FacesList, int meshnumber)
        {
            output.Write(System.Environment.NewLine + "setAttr -s " + (FacesList[meshnumber].GetLength(0) * 3) + " \".ed\";");
            output.Write(System.Environment.NewLine + "setAttr \".ed[0:" + ((FacesList[meshnumber].GetLength(0) * 3) - 1) + "]\"");
            for (int i = 0; i < FacesList[meshnumber].GetLength(0); i++)
            {
                output.Write(" " + (FacesList[meshnumber][i, 0] - 1) + " " + (FacesList[meshnumber][i, 1] - 1) + " 0");
                output.Write(" " + (FacesList[meshnumber][i, 1] - 1) + " " + (FacesList[meshnumber][i, 2] - 1) + " 0");
                output.Write(" " + (FacesList[meshnumber][i, 2] - 1) + " " + (FacesList[meshnumber][i, 0] - 1) + " 0");
            }
            output.Write(";");
            output.Write(System.Environment.NewLine + "setAttr -s " + (FacesList[meshnumber].GetLength(0) * 3) + " \".n\";");
            //output.Write(System.Environment.NewLine + "setAttr \".n[0:" + ((FacesList[meshnumber].GetLength(0) * 3) - 1) + "]\" -type \"float3\"");
            output.Write(System.Environment.NewLine + "setAttr -s " + FacesList[meshnumber].GetLength(0) + " \".fc[0:" + (FacesList[meshnumber].GetLength(0) - 1) + "]\" -type \"polyFaces\"");
            for (int i = 0; i < FacesList[meshnumber].GetLength(0); i++)
            {
                output.Write(" f 3 " + (i * 3) + " " + ((i * 3) + 1) + " " + ((i * 3) + 2));
                output.Write(" mu 0 3 " + (FacesList[meshnumber][i, 0] - 1) + " " + (FacesList[meshnumber][i, 1] - 1) + " " + (FacesList[meshnumber][i, 2] - 1));
                output.Write(" mc 0 3 " + (i * 3) + " " + ((i * 3) + 1) + " " + ((i * 3) + 2));
            }
            output.Write(";");
            output.Write(System.Environment.NewLine + "setAttr \".cd\" -type \"dataPolyComponent\" Index_Data Edge 0 ;");
            output.Write(System.Environment.NewLine + "setAttr \".cvd\" -type \"dataPolyComponent\" Index_Data Vertex 0 ;");
            output.Write(System.Environment.NewLine + "setAttr \".hfd\" -type \"dataPolyComponent\" Index_Data Face 0 ;");
        }

        public static void AddColorSet(StreamWriter output, List<float[,]> FacesList, int meshnumber)
        {
            output.Write(System.Environment.NewLine + "setAttr \".dcc\" -type \"string\" \"Ambient + Diffuse\";");
            output.Write(System.Environment.NewLine + "setAttr \".ccls\" -type \"string\" \"colorSet1\";");
            output.Write(System.Environment.NewLine + "setAttr \".clst[0].clsn\" -type \"string\" \"colorSet1\";");
            /*output.Write(System.Environment.NewLine + "setAttr -s " + (FacesList[meshnumber].GetLength(0) * 3) + " \".clst[0].clsp\";");
            output.Write(System.Environment.NewLine + "setAttr \".clst[0].clsp[0:" + ((FacesList[meshnumber].GetLength(0) * 3) - 1) + "]\"");
            for (int i = 0; i < FacesList[meshnumber].GetLength(0); i++)
            {
                output.Write(" 1 1 1");
            }
            output.Write(";");*/
        }

        public static void AddMaterialBegin(StreamWriter output, List<string[]> MaterialList, int MatNumber)
        {
            output.Write(System.Environment.NewLine + "createNode shadingEngine -n \""+ MaterialList[MatNumber][0] + "SG\";");
            output.Write(System.Environment.NewLine + "\tsetAttr \".ihi\" 0;");
            output.Write(System.Environment.NewLine + "\tsetAttr \".ro\" yes;");
            output.Write(System.Environment.NewLine + "createNode materialInfo -n \"" + MaterialList[MatNumber][0] + "MI\";");
            output.Write(System.Environment.NewLine + System.Environment.NewLine + "createNode phong -n \"" + MaterialList[MatNumber][0] + "\";");
            output.Write(System.Environment.NewLine + "\tsetAttr \".ambc\" -type \"float3\" 1 1 1 ;");
            output.Write(System.Environment.NewLine + "createNode file -n \"" + MaterialList[MatNumber][0] + "FILE\";");
            output.Write(System.Environment.NewLine + "\tsetAttr \".ftn\" -type \"string\" \"" + MaterialList[MatNumber][1] + "\";");
            output.Write(System.Environment.NewLine + "createNode place2dTexture -n \"" + MaterialList[MatNumber][0] + "P2DT\";" + System.Environment.NewLine);
        }

        public static void AddMaterial(StreamWriter output, List<string[]> MaterialList, int MatNumber)
        {
            output.Write(System.Environment.NewLine + "connectAttr \":defaultLightSet.msg\" \"lightLinker1.lnk["+ (MatNumber + 2) + "].llnk\";");
            output.Write(System.Environment.NewLine + "connectAttr \"" + MaterialList[MatNumber][0] + "SG.msg\" \"lightLinker1.lnk[" + (MatNumber + 2) + "].olnk\";");
            output.Write(System.Environment.NewLine + "connectAttr \":defaultLightSet.msg\" \"lightLinker1.slnk[" + (MatNumber + 2) + "].sllk\";");
            output.Write(System.Environment.NewLine + "connectAttr \"" + MaterialList[MatNumber][0] + "SG.msg\" \"lightLinker1.slnk[" + (MatNumber + 2) + "].solk\";");
            output.Write(System.Environment.NewLine + "connectAttr \"" + MaterialList[MatNumber][0] + ".oc\" \"" + MaterialList[MatNumber][0] + "SG.ss\";");
            output.Write(System.Environment.NewLine + "connectAttr \"" + MaterialList[MatNumber][0] + "SG.msg\" \"" + MaterialList[MatNumber][0] + "MI.sg\";");
            output.Write(System.Environment.NewLine + "connectAttr \"" + MaterialList[MatNumber][0] + ".msg\" \"" + MaterialList[MatNumber][0] + "MI.m\";");
            output.Write(System.Environment.NewLine + "connectAttr \"" + MaterialList[MatNumber][0] + "FILE.msg\" \"" + MaterialList[MatNumber][0] + "MI.t\" -na;");
            output.Write(System.Environment.NewLine + "connectAttr \"" + MaterialList[MatNumber][0] + "FILE.oc\" \"" + MaterialList[MatNumber][0] + ".c\";");
            output.Write(System.Environment.NewLine + "connectAttr \"" + MaterialList[MatNumber][0] + "P2DT.c\" \"" + MaterialList[MatNumber][0] + "FILE.c\";");
            output.Write(System.Environment.NewLine + "connectAttr \"" + MaterialList[MatNumber][0] + "P2DT.tf\" \"" + MaterialList[MatNumber][0] + "FILE.tf\";");
            output.Write(System.Environment.NewLine + "connectAttr \"" + MaterialList[MatNumber][0] + "P2DT.rf\" \"" + MaterialList[MatNumber][0] + "FILE.rf\";");
            output.Write(System.Environment.NewLine + "connectAttr \"" + MaterialList[MatNumber][0] + "P2DT.mu\" \"" + MaterialList[MatNumber][0] + "FILE.mu\";");
            output.Write(System.Environment.NewLine + "connectAttr \"" + MaterialList[MatNumber][0] + "P2DT.mv\" \"" + MaterialList[MatNumber][0] + "FILE.mv\";");
            output.Write(System.Environment.NewLine + "connectAttr \"" + MaterialList[MatNumber][0] + "P2DT.s\" \"" + MaterialList[MatNumber][0] + "FILE.s\";");
            output.Write(System.Environment.NewLine + "connectAttr \"" + MaterialList[MatNumber][0] + "P2DT.wu\" \"" + MaterialList[MatNumber][0] + "FILE.wu\";");
            output.Write(System.Environment.NewLine + "connectAttr \"" + MaterialList[MatNumber][0] + "P2DT.wv\" \"" + MaterialList[MatNumber][0] + "FILE.wv\";");
            output.Write(System.Environment.NewLine + "connectAttr \"" + MaterialList[MatNumber][0] + "P2DT.re\" \"" + MaterialList[MatNumber][0] + "FILE.re\";");
            output.Write(System.Environment.NewLine + "connectAttr \"" + MaterialList[MatNumber][0] + "P2DT.of\" \"" + MaterialList[MatNumber][0] + "FILE.of\";");
            output.Write(System.Environment.NewLine + "connectAttr \"" + MaterialList[MatNumber][0] + "P2DT.r\" \"" + MaterialList[MatNumber][0] + "FILE.ro\";");
            output.Write(System.Environment.NewLine + "connectAttr \"" + MaterialList[MatNumber][0] + "P2DT.n\" \"" + MaterialList[MatNumber][0] + "FILE.n\";");
            output.Write(System.Environment.NewLine + "connectAttr \"" + MaterialList[MatNumber][0] + "P2DT.vt1\" \"" + MaterialList[MatNumber][0] + "FILE.vt1\";");
            output.Write(System.Environment.NewLine + "connectAttr \"" + MaterialList[MatNumber][0] + "P2DT.vt2\" \"" + MaterialList[MatNumber][0] + "FILE.vt2\";");
            output.Write(System.Environment.NewLine + "connectAttr \"" + MaterialList[MatNumber][0] + "P2DT.vt3\" \"" + MaterialList[MatNumber][0] + "FILE.vt3\";");
            output.Write(System.Environment.NewLine + "connectAttr \"" + MaterialList[MatNumber][0] + "P2DT.vc1\" \"" + MaterialList[MatNumber][0] + "FILE.vc1\";");
            output.Write(System.Environment.NewLine + "connectAttr \"" + MaterialList[MatNumber][0] + "P2DT.o\" \"" + MaterialList[MatNumber][0] + "FILE.uv\";");
            output.Write(System.Environment.NewLine + "connectAttr \"" + MaterialList[MatNumber][0] + "P2DT.ofs\" \"" + MaterialList[MatNumber][0] + "FILE.fs\";");
            output.Write(System.Environment.NewLine + System.Environment.NewLine + "connectAttr \"" + MaterialList[MatNumber][0] + "SG.pa\" \":renderPartition.st\" -na;");
            output.Write(System.Environment.NewLine + "connectAttr \"" + MaterialList[MatNumber][0] + ".msg\" \":defaultShaderList1.s\" -na;");
            output.Write(System.Environment.NewLine + "connectAttr \"" + MaterialList[MatNumber][0] + "P2DT.msg\" \":defaultRenderUtilityList1.u\" -na;");
            output.Write(System.Environment.NewLine + "connectAttr \"" + MaterialList[MatNumber][0] + "FILE.msg\" \":defaultTextureList1.tx\" -na;");
        }

        public static void AddMaterialAssign(StreamWriter output, List<string[]> MaterialList, int MatNumber)
        {
            output.Write(System.Environment.NewLine + "connectAttr \"" + MaterialList[MatNumber][0] + "SG.mwc\" \"MeshShape_" + MatNumber + ".iog.og[0].gco\";");
            output.Write(System.Environment.NewLine + "connectAttr \"MeshShape_"+ MatNumber + ".iog\" \"" + MaterialList[MatNumber][0] + "SG.dsm\" -na;");
        }
    }
}
